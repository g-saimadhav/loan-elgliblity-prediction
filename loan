import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

# Load your dataset (replace 'your_dataset.csv' with the actual file path)
df = pd.read_csv('/content/bank fraud.csv')

# Handle non-numeric values in the 'label' column
df['label'] = pd.to_numeric(df['label'], errors='coerce')

# Drop rows with missing values in the 'label' column
df = df.dropna(subset=['label'])

# Assuming 'label' is the target variable
X = df.drop('label', axis=1)
y = df['label']

# Identify Numeric Features
numeric_features = X.select_dtypes(include=['float64', 'int64']).columns

# Create a Numeric Transformer Pipeline
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])

# Create a ColumnTransformer
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features)
    ])

# Initialize and train the LogisticRegression within a Pipeline
model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('classifier', LogisticRegression())])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Classification Report:\n", report)

